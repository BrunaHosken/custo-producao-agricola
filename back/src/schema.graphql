scalar Date

type Query {
  agricultor: Agricultor
}

type Mutation {
  login(Email: String!, Senha: String!): AuthPayload
  signup(Email: String!, Senha: String!, Nome: String!): AuthPayload
  createContato(DescrContato: String!): Contato!
  createTipoDespesa(DescrTipoDespesa: String!): TipoDespesa!
  createDespesaRealizada(
    DescrDetalhada: String!
    Data: Date!
    Valor: Float!
    TipoDespesaId: ID!
  ): DespesaRealizada!
  createCliente(NomeCliente: String): Cliente!
  createVenda(Data: Date!, ClienteId: ID!): Venda!
  # createVendaItem(Qtd:Float!,Und:String!,PrecoUnit:Float!,Venda:ID!):VendaItem!
  createCultura(
    DescrCultura: String!
    QtdEstimadaPorHectare: Float!
    Und: String!
  ): Cultura!
  createTipoInsumo(NomeTipo: String!): TipoInsumo!
  createServico(DescrServico: String!, ValorDiaHomem: Float!): Servico!
}

type AuthPayload {
  token: String!
  agricultor: Agricultor!
}

type Agricultor {
  id: ID!
  Nome: String!
  Email: String!
}

type Contato {
  id: ID!
  DescrContato: String!
  Agricultor: Agricultor!
}

type TipoDespesa {
  id: ID!
  DescrTipoDespesa: String!
}

type DespesaRealizada {
  id: ID!
  DescrDetalhada: String!
  Data: Date!
  Valor: Float!
  Agricultor: Agricultor!
  TipoDespesa: TipoDespesa!
}

type Cliente {
  id: ID!
  NomeCliente: String!
}

type Venda {
  id: ID!
  Data: Date!
  Cliente: Cliente!
}

# type VendaItem {
#   id: ID!
#   Qtd: Float!
#   Und: String!
#   PrecoUnit: Float!
#   Venda: Venda!
# }

type Cultura {
  id: ID!
  DescrCultura: String!
  QtdEstimadaPorHectare: Float!
  Und: String!
}

type TipoInsumo {
  id: ID!
  NomeTipo: String!
}
type Servico {
  id: ID!
  DescrServico: String!
  ValorDiaHomem: Float!
}
